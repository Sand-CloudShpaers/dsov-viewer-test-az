5 ESLint rules behave differently from their TSLint counterparts:
  * prefer-arrow/prefer-arrow-functions:
    - ESLint does not support allowing named functions defined with the function keyword.
  * arrow-body-style:
    - ESLint will throw an error if the function body is multiline yet has a one-line return on it.
  * @typescript-eslint/no-unused-expressions:
    - The TSLint optional config "allow-new" is the default ESLint behavior and will no longer be ignored.
  * eqeqeq:
    - Option "smart" allows for comparing two literal values, evaluating the value of typeof and null comparisons.
  * no-underscore-dangle:
    - Leading or trailing underscores (_) on identifiers will now be forbidden.

11 rules are not known by tslint-to-eslint-config to have ESLint equivalents:
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-assign-mutated-array".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-focused-tests".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "no-unused-declaration".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-finnish".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-no-exposed-subjects".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-no-unsafe-catch".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-no-unsafe-switchmap".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-prefer-angular-async-pipe".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "rxjs-prefer-angular-takeuntil".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "template-use-track-by-function".
  * tslint-to-eslint-config does not know the ESLint equivalent for TSLint's "typedef".

